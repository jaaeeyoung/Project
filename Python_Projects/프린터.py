'''
=======================================================================================================================================
+ 문제 +
=======================================================================================================================================
프린터 ☆☆
=======================================================================================================================================
+ 문제 설명 +
=======================================================================================================================================
' 일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 
  중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.

  1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
  2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
  3. 그렇지 않으면 J를 인쇄합니다.

' 예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.
' 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.
' 현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는
  location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.
=======================================================================================================================================
+ 제한 사항 +
=======================================================================================================================================
' 현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.
' 인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.
' location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.
=======================================================================================================================================
+ 입출력 예 +
=======================================================================================================================================
priorities	        location	return
[2, 1, 3, 2]	    2	        1
[1, 1, 9, 1, 1, 1]	0	        5
=======================================================================================================================================
+ 입출력 예 설명 +
=======================================================================================================================================
' 예제 #1

    문제에 나온 예와 같습니다.

' 예제 #2

    6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.
=======================================================================================================================================
+ 수정 기록 +
=======================================================================================================================================
' 2021-09-24-FRI : 문제 파악
                   Test 1, 5, 14, 15 통과
                   temp의 0번째 index 원소 삭제 후 max 값이 가장 앞으로 오도록 다시 정렬해야함
                   Test 2, 6, 8 - 11, 13, 16, 17, 19 실패
                   Test 2, 6, 8, 10, 11, 13, 16, 17, 19 실패
                   완성
=======================================================================================================================================
'''

def solution(priorities, location):
    answer = 0
    temp = priorities[:]
    tmp = []

    while True:
        # temp의 max값, max값의 index 찾기
        if len(temp) > 1:
            max_ = max(temp)
            index_ = temp.index(max_)
        else:
            max_ = temp[0]
            index_ = 0

        # 재정렬된 temp에 따라 location 변경
        if (location - index_) < 0:
            location = len(temp) - index_ + location
        else:
            location -= index_

        # temp에 최우선 문서가 index 0으로 오도록 재배열
        tmp = temp[:index_]
        temp = temp[index_:]
        temp += tmp
        # location의 값이 temp의 0번째 원소가 아니라면
        if location != 0:
            # temp[0] 삭제
            del temp[0]
            # location 1 감소
            location -= 1
            # answer 1 증가
            answer += 1
        # location의 값이 temp의 0번째 원소라면
        else:
            # answer 1 증가
            answer += 1
            # while문 탈출
            break

    return answer

print(solution([2, 1, 3, 2], 2)) # 1
print(solution([1, 1, 9, 1, 1, 1], 0)) # 5
print(solution([1, 2, 8, 3, 4], 4)) # 2
print(solution([3], 0)) # 1
print(solution([2, 1, 9, 1, 9, 1], 1)) # 4